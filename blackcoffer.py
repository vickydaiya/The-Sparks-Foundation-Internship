# -*- coding: utf-8 -*-
"""Blackcoffer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kcae7FHZtD-Uls5qfeg39mU2o6CLr-hB

**Importing required libraries**
"""

#from google.colab import files
import pandas as pd
import nltk
nltk.download('punkt')
nltk.download('stopwords')
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.corpus import stopwords 
import string #for punctuation set
import re
import requests
import time #for sleep
import numpy as np

"""**Uploading required dictionaries and datasets**"""

# uploaded = files.upload()
# print(uploaded)

"""**Adding https://www.sec.gov/Archives/ to Column F to form link**"""

cik_list_data = pd.read_csv(r'C:\Users\VICKY\Desktop\BLACKCOFFER\cik_list.xlsx - cik_list_ajay.csv')
cik_list_data['SECFNAME'] =  'https://www.sec.gov/Archives/' + cik_list_data['SECFNAME']
#cik_list_data.to_csv(r'C:\Users\VICKY\Desktop\BLACKCOFFER\cik_list.xlsx - cik_list_ajay.csv')

nltk_stopwords = np.array(stopwords.words('english'))

file_connection = open(r"C:\Users\VICKY\Desktop\BLACKCOFFER\StopWords_GenericLong.txt", "r")
stopwords_list = np.array(file_connection.read().split())
file_connection.close()

masterdict = pd.read_csv(r'C:\Users\VICKY\Desktop\BLACKCOFFER\LoughranMcDonald_MasterDictionary_2018.csv')
uncertainty_dict = pd.read_excel(r'C:\Users\VICKY\Desktop\BLACKCOFFER\uncertainty_dictionary.xlsx')
constraining_dict = pd.read_excel(r'C:\Users\VICKY\Desktop\BLACKCOFFER\constraining_dictionary.xlsx')
positive_words = masterdict[masterdict['Positive']!=0]['Word'].to_numpy()
negative_words = masterdict[masterdict['Negative']!=0]['Word'].to_numpy()
uncertain_words = uncertainty_dict['Word'].to_numpy()
constraining_words = constraining_dict['Word'].to_numpy()
words_in_master_dict = masterdict['Word'].to_numpy()

doc_start_pattern = re.compile(r'<DOCUMENT>')
doc_end_pattern = re.compile(r'</DOCUMENT>')
type_pattern = re.compile(r'<TYPE>[^\n]+')
htmltags_pattern = re.compile(r'<.*?>',re.IGNORECASE|re.DOTALL)
mda_pattern = re.compile(r'item[^a-zA-Z\n]*\d\s*\.\s*management\'s[\s\n]*discussion[\s\n]*and[\s\n]*analysis.*?^\s*item[^a-zA-Z\n]*\d\s*\.*',re.MULTILINE|re.IGNORECASE|re.DOTALL)
qqdmr_pattern = re.compile(r"item[^a-zA-Z\n]*\d[A-Z]?\.?\s*Quantitative[\s\n]*and[\s\n]*Qualitative[\s\n]*Disclosures[\s\n]*about[\s\n]*Market[\s\n]*Risk.*?^\s*item[^a-zA-Z\n]*\d[A-Z]?\.?",re.MULTILINE|re.IGNORECASE|re.DOTALL)
rf_pattern = re.compile(r"item[^a-zA-Z\n]*\d[a-z]?\.?\s*Risk[\s\n]*Factors.*?^\s*item[^a-zA-Z\n]*\d[a-z]?\.?",re.MULTILINE|re.IGNORECASE|re.DOTALL)

def cleaningUsingStopwordsList(data):
  words = np.array(word_tokenize(data))
  words_filtered = []

  for w in words:
    if w not in stopwords_list:
      words_filtered.append(w)

  return np.array(words_filtered)

def cleaningUsingNLTKStopwords(data):
  words = np.array(word_tokenize(data))
  punctuations = np.array(list(string.punctuation))
  words_filtered = []

  for w in words:
    if w not in nltk_stopwords and w not in punctuations:
      words_filtered.append(w)

  return np.array(words_filtered)

def wordCount(data):
  return cleaningUsingNLTKStopwords(data).size

def scores(data):
  words = cleaningUsingStopwordsList(data)
  positive_score = 0
  negative_score = 0

  for w in words:
    if w.upper() in positive_words:
      positive_score += 1
    elif w.upper() in negative_words:
      negative_score -= 1

  negative_score *= -1
  polarity_score = (positive_score - negative_score)/ ((positive_score + negative_score) + 0.000001)

  return positive_score,negative_score,polarity_score

"""look at sent_tokenize """

def avgWordsPerSent(data):
  num_words = wordCount(data)
  num_sents = len(sent_tokenize(data))
  return (num_words/num_sents)

def isComplex(word):
  vowel_count = 0
  vowels = np.array(['a','e','i','o','u','A','E','I','O','U'])
  for char in word:
    if char in vowels:
      vowel_count += 1
  if word[len(word)-2:len(word)] == 'es' or word[len(word)-2:len(word)] == 'ed':
    vowel_count -= 1
  if vowel_count > 2:
    return True
  else:
    return False

def complexWordCount(data):
  count = 0
  words = cleaningUsingNLTKStopwords(data)
  for w in words:
    if isComplex(w):
      count += 1
  return count

def percentComplexWords(data):
  return complexWordCount(data)/wordCount(data)

def fogIndex(data):
  return 0.4 * (avgWordsPerSent(data) + percentComplexWords(data))

def uncertaintyScore(data):
  words = cleaningUsingStopwordsList(data)
  uncertainty_score = 0

  for w in words:
    if w.upper() in uncertain_words:
      uncertainty_score += 1
  
  return uncertainty_score

def constrainingScore(data):
  words = cleaningUsingStopwordsList(data)
  constraining_score = 0

  for w in words:
    if w.upper() in constraining_words:
      constraining_score += 1
  
  return constraining_score

def uncertaintyScoreProportion(data):
  return uncertaintyScore(data)/wordCount(data)

def constrainingScoreProportion(data):
  return constrainingScore(data)/wordCount(data)

def positiveScoreProportion(data):
  return scores(data)[0]/wordCount(data)

def negativeScoreProportion(data):
  return scores(data)[1]/wordCount(data)

def vars(data):
  if data == "":
    return {'positive_score': "",'negative_score': "",'polarity_score': "",'avg_word_per_sent': "",'percent_cmplx_words': "",'fog_index': "",'cmplx_word_count': "",'word_count':"",'uncertainty_score':"",'constraining_score':"",'uncertainty_score_prop':"",'constraining_score_prop':"",'positive_score_prop':"",'negative_score_prop':""}
  else:
    return {'positive_score': scores(data)[0],'negative_score': scores(data)[1],'polarity_score': scores(data)[2],'avg_word_per_sent': avgWordsPerSent(data),'percent_cmplx_words': percentComplexWords(data),'fog_index': fogIndex(data),'cmplx_word_count': complexWordCount(data),'word_count':wordCount(data),'uncertainty_score':uncertaintyScore(data),'constraining_score':constrainingScore(data),'uncertainty_score_prop':uncertaintyScoreProportion(data),'constraining_score_prop':constrainingScoreProportion(data),'positive_score_prop':positiveScoreProportion(data),'negative_score_prop':negativeScoreProportion(data)}

def extractData():
  document = {}
  for i in range(0,len(cik_list_data)): 
    resultdict = {}
    raw_text = requests.get(cik_list_data['SECFNAME'][i]).text
    doc_start_is = [x.end() for x in doc_start_pattern.finditer(raw_text)]
    doc_end_is = [x.start() for x in doc_end_pattern.finditer(raw_text)]
    doc_types = [x[len('<TYPE>'):] for x in type_pattern.findall(raw_text)]
    for doc_type, doc_start, doc_end in zip(doc_types, doc_start_is, doc_end_is):
      if doc_type == cik_list_data['FORM'][i]:
        document[i] = raw_text[doc_start:doc_end]
    document[i] = re.sub(htmltags_pattern,'',document[i])
    document[i] = document[i].replace('&nbsp;','')
    document[i] = re.sub(r'&#146;', '\'', document[i])
    document[i] = re.sub(r'&#160;', ' ', document[i])
    resultdict['constraining_score_report'] = constrainingScore(document[i])
    matches_mda = mda_pattern.findall(document[i])
    if matches_mda:
      result_mda = max(matches_mda, key=len)
      result_mda = str(result_mda).replace('\n', ' ')
      resultdict['mda_extract'] = result_mda
    else:
      resultdict['mda_extract'] = ""
    match_qqdmr = qqdmr_pattern.findall(document[i])
    if match_qqdmr:
      result_qqdmr = max(match_qqdmr, key=len)
      result_qqdmr = str(result_qqdmr).replace('\n',' ')
      resultdict['qqdmr_extract']= result_qqdmr
    else:
      resultdict['qqdmr_extract'] = ""
    match_rf = rf_pattern.findall(document[i])
    if match_rf:
      result_rf = max(match_rf, key=len)
      result_rf = str(result_rf).replace('\n', ' ')
      resultdict['rf_extract'] = result_rf
    else:
      resultdict['rf_extract'] = ""
    document[i] = resultdict
    time.sleep(0.1) #sec.gov allows 10 requests per second
  return document

output_df = pd.DataFrame(columns = [
                                    'CIK',
                                    'CONAME',
                                    'FYRMO',
                                    'FDATE',
                                    'FORM',
                                    'SECFNAME',
                                    'mda_positive_score',
                                    'mda_negative_score',
                                    'mda_polarity_score',
                                    'mda_average_sentence_length',
                                    'mda_percentage_of_complex_words',
                                    'mda_fog_index',
                                    'mda_complex_word_count',
                                    'mda_word_count',
                                    'mda_uncertainty_score',
                                    'mda_constraining_score',
                                    'mda_positive_word_proportion',
                                    'mda_negative_word_proportion',
                                    'mda_uncertainty_word_proportion',
                                    'mda_constraining_word_proportion',
                                    'qqdmr_positive_score',
                                    'qqdmr_negative_score',
                                    'qqdmr_polarity_score',
                                    'qqdmr_average_sentence_length',
                                    'qqdmr_percentage_of_complex_words',
                                    'qqdmr_fog_index',
                                    'qqdmr_complex_word_count',
                                    'qqdmr_word_count',
                                    'qqdmr_uncertainty_score',
                                    'qqdmr_constraining_score',
                                    'qqdmr_positive_word_proportion',
                                    'qqdmr_negative_word_proportion',
                                    'qqdmr_uncertainty_word_proportion',
                                    'qqdmr_constraining_word_proportion',
                                    'rf_positive_score',
                                    'rf_negative_score',
                                    'rf_polarity_score',
                                    'rf_average_sentence_length',
                                    'rf_percentage_of_complex_words',
                                    'rf_fog_index',
                                    'rf_complex_word_count',
                                    'rf_word_count',
                                    'rf_uncertainty_score',
                                    'rf_constraining_score',
                                    'rf_positive_word_proportion',
                                    'rf_negative_word_proportion',
                                    'rf_uncertainty_word_proportion',
                                    'rf_constraining_word_proportion',
                                    'constraining_words_whole_report'
                                    ])
extracted_data_dict = extractData()
for i in range(0,len(cik_list_data)):
  mda_vars = vars(extracted_data_dict[i]['mda_extract'])
  qqdmr_vars = vars(extracted_data_dict[i]['qqdmr_extract'])
  rf_vars = vars(extracted_data_dict[i]['rf_extract'])

  output_df = output_df.append({'CIK': cik_list_data['CIK'][i],
                    'CONAME': cik_list_data['CONAME'][i],
                    'FYRMO': cik_list_data['FYRMO'][i],
                    'FDATE': cik_list_data['FDATE'][i],
                    'FORM': cik_list_data['FORM'][i],
                    'SECFNAME': cik_list_data['SECFNAME'][i],
                    'mda_positive_score':mda_vars['positive_score'],
                    'mda_negative_score':mda_vars['negative_score'],
                    'mda_polarity_score':mda_vars['polarity_score'],
                    'mda_average_sentence_length':mda_vars['avg_word_per_sent'],
                    'mda_percentage_of_complex_words':mda_vars['percent_cmplx_words'],
                    'mda_fog_index':mda_vars['fog_index'],
                    'mda_complex_word_count':mda_vars['cmplx_word_count'],
                    'mda_word_count':mda_vars['word_count'],
                    'mda_uncertainty_score':mda_vars['uncertainty_score'],
                    'mda_constraining_score':mda_vars['constraining_score'],
                    'mda_positive_word_proportion':mda_vars['positive_score_prop'],
                    'mda_negative_word_proportion':mda_vars['negative_score_prop'],
                    'mda_uncertainty_word_proportion':mda_vars['uncertainty_score_prop'],
                    'mda_constraining_word_proportion':mda_vars['constraining_score_prop'],
                    'qqdmr_positive_score':qqdmr_vars['positive_score'],
                    'qqdmr_negative_score':qqdmr_vars['negative_score'],
                    'qqdmr_polarity_score':qqdmr_vars['polarity_score'],
                    'qqdmr_average_sentence_length':qqdmr_vars['avg_word_per_sent'],
                    'qqdmr_percentage_of_complex_words':qqdmr_vars['percent_cmplx_words'],
                    'qqdmr_fog_index':qqdmr_vars['fog_index'],
                    'qqdmr_complex_word_count':qqdmr_vars['cmplx_word_count'],
                    'qqdmr_word_count':qqdmr_vars['word_count'],
                    'qqdmr_uncertainty_score':qqdmr_vars['uncertainty_score'],
                    'qqdmr_constraining_score':qqdmr_vars['constraining_score'],
                    'qqdmr_positive_word_proportion':qqdmr_vars['positive_score_prop'],
                    'qqdmr_negative_word_proportion':qqdmr_vars['negative_score_prop'],
                    'qqdmr_uncertainty_word_proportion':qqdmr_vars['uncertainty_score_prop'],
                    'qqdmr_constraining_word_proportion':qqdmr_vars['constraining_score_prop'],
                    'rf_positive_score':rf_vars['positive_score'],
                    'rf_negative_score':rf_vars['negative_score'],
                    'rf_polarity_score':rf_vars['polarity_score'],
                    'rf_average_sentence_length':rf_vars['avg_word_per_sent'],
                    'rf_percentage_of_complex_words':rf_vars['percent_cmplx_words'],
                    'rf_fog_index':rf_vars['fog_index'],
                    'rf_complex_word_count':rf_vars['cmplx_word_count'],
                    'rf_word_count':rf_vars['word_count'],
                    'rf_uncertainty_score':rf_vars['uncertainty_score'],
                    'rf_constraining_score':rf_vars['constraining_score'],
                    'rf_positive_word_proportion':rf_vars['positive_score_prop'],
                    'rf_negative_word_proportion':rf_vars['negative_score_prop'],
                    'rf_uncertainty_word_proportion':rf_vars['uncertainty_score_prop'],
                    'rf_constraining_word_proportion':rf_vars['constraining_score_prop'],
                    'constraining_words_whole_report':extracted_data_dict[i]['constraining_score_report']},
                    ignore_index = True
                   )

output_df.to_excel(r'C:\Users\VICKY\Desktop\BLACKCOFFER\output.xlsx')
output_df.to_csv(r'C:\Users\VICKY\Desktop\BLACKCOFFER\output.csv')

output_df.tail()